buildscript {
  ext {
    detektVersion = '1.7.1'
    dokkaVersion = '0.10.1'
    kotlinVersion = '1.3.71'
    kotlinJVMVersion = '1.8'
    junitJupiterVersion = '5.5.0'
    junitAssertJVersion = '3.12.2'
    jacksonVersion = '2.9.+'
  }

  repositories {
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
  }
}

plugins {
  id "jacoco"
  id "application"
  id "org.jetbrains.kotlin.jvm" version "1.3.71"
  id "org.jetbrains.dokka" version "0.10.1"
  id "io.gitlab.arturbosch.detekt" version "1.7.1"
}

version '1.0.0'
mainClassName = 'koref.KorefDriverKt'
sourceCompatibility = "$kotlinJVMVersion"

compileKotlin {
  kotlinOptions {
    jvmTarget = "$kotlinJVMVersion"
  }
}
compileTestKotlin {
  kotlinOptions {
    jvmTarget = "$kotlinJVMVersion"
  }
}

repositories {
  jcenter()
  mavenCentral()
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
  compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
  compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"
  testImplementation "org.assertj:assertj-core:$junitAssertJVersion"
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
  testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
}

dokka {
  outputFormat = 'markdown'
  outputDirectory = "$buildDir/kdoc"
}

detekt {
  toolVersion = "$detektVersion"
  input = files("src/main/kotlin")
  config = files("detekt.yml")
}

test {
  useJUnitPlatform()
  beforeTest { descriptor -> logger.lifecycle("Running test: ${descriptor}") }
}

jacoco {
  toolVersion = "0.8.5"
}

jacocoTestReport {
  reports {
    xml.enabled false
    csv.enabled false
    html.destination file("${buildDir}/jacocoHtml")
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        minimum = 1.0
      }
    }
  }
}

